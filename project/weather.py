from datetime import datetime, timedelta

import requests

from project import parameters

# –ü–æ–ª—É—á–∏—Ç—å –ø–æ–≥–æ–¥—É –≤ –≥–æ—Ä–æ–¥–µ.
def getWeather(city):
    request_str = "http://api.openweathermap.org/data/2.5/weather?q=" + city + "&appid=" + parameters.weather_key \
                  + "&units=metric&&lang=RU"
    response = requests.get(request_str)
    info = response.json()

    w_temperature = int(info["main"]["temp"])
    w_pressure = int(int(info["main"]["pressure"]) / 1.333)
    w_humidity = int(info["main"]["humidity"])
    w_wind_speed = round(info["wind"]["speed"], 1)
    w_wind_direction = degToCompass(int(info["wind"]["deg"]))
    w_wind_descr = speedToDescr(float(info["wind"]["speed"]))
    w_type_weather = ""
    w_description = ""
    w_icon = ""
    for item in info["weather"][:1]:
        w_type_weather = item["main"]
        w_description = str(item["description"]).capitalize()
        w_icon = item["icon"]
    w_icon = iconToSmile(w_icon)

    return "–ü–æ–≥–æ–¥–∞ –≤ –ú–æ—Å–∫–≤–µ\n\n" + str(w_icon) + " " + str(w_description) + "\nüå° –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: " + str(w_temperature) \
           + "¬∞C\n–î–∞–≤–ª–µ–Ω–∏–µ: " + str(w_pressure) + " –º–º. —Ä—Ç. —Å—Ç., –≤–ª–∞–∂–Ω–æ—Å—Ç—å: " + str(w_humidity) + "%\n–í–µ—Ç–µ—Ä: " + \
           str(w_wind_speed) + " –º/c, " + str(w_wind_descr) + ", " + str(w_wind_direction)


# –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è.
def getTodayForecast(city):
    request_str = "http://api.openweathermap.org/data/2.5/forecast?q=" + city + "&appid=" + parameters.weather_key \
                  + "&units=metric&&lang=RU"
    response = requests.get(request_str)
    info = response.json()

    return_str = "–ü–æ–≥–æ–¥–∞ –≤ –ú–æ—Å–∫–≤–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è"
    for i in info['list']:
        if i['dt_txt'] == (datetime.today()).strftime("%Y-%m-%d") + " 06:00:00" or \
                i['dt_txt'] == (datetime.today()).strftime("%Y-%m-%d") + " 12:00:00" or \
                i['dt_txt'] == (datetime.today()).strftime("%Y-%m-%d") + " 18:00:00" or \
                i['dt_txt'] == (datetime.today() + timedelta(days=1)).strftime("%Y-%m-%d") + " 00:00:00":
            if i['dt_txt'] == (datetime.today()).strftime("%Y-%m-%d") + " 06:00:00":
                return_str = return_str + "\n\n–£–¢–†–û\n"
            elif i['dt_txt'] == (datetime.today()).strftime("%Y-%m-%d") + " 12:00:00":
                return_str = return_str + "\n\n–î–ï–ù–¨\n"
            elif i['dt_txt'] == (datetime.today()).strftime("%Y-%m-%d") + " 18:00:00":
                return_str = return_str + "\n\n–í–ï–ß–ï–†\n"
            elif i['dt_txt'] == (datetime.today() + timedelta(days=1)).strftime("%Y-%m-%d") + " 00:00:00":
                return_str = return_str + "\n\n–ù–û–ß–¨\n"

            w_temperature = int(i["main"]["temp"])
            w_pressure = int(int(i["main"]["pressure"]) / 1.333)
            w_humidity = int(i["main"]["humidity"])
            w_wind_speed = round(i["wind"]["speed"], 1)
            w_wind_direction = degToCompass(int(i["wind"]["deg"]))
            w_wind_descr = speedToDescr(float(i["wind"]["speed"]))
            w_type_weather = ""
            w_description = ""
            w_icon = ""
            for item in i["weather"][:1]:
                w_type_weather = item["main"]
                w_description = str(item["description"]).capitalize()
                w_icon = item["icon"]
            w_icon = iconToSmile(w_icon)
            return_str = return_str + str(w_icon) + " " + str(w_description) + "\nüå° –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: " + str(
                w_temperature) \
                         + "¬∞C\n–î–∞–≤–ª–µ–Ω–∏–µ: " + str(w_pressure) + " –º–º. —Ä—Ç. —Å—Ç., –≤–ª–∞–∂–Ω–æ—Å—Ç—å: " + str(
                w_humidity) + "%\n–í–µ—Ç–µ—Ä: " + \
                         str(w_wind_speed) + " –º/c, " + str(w_wind_descr) + ", " + str(w_wind_direction)

    return return_str

# –ü–æ–ª—É—á–∏—Ç—å –ø–æ–≥–æ–¥—É –Ω–∞ –∑–∞–≤—Ç—Ä–∞.
def getTomorrowForecast(city):
    request_str = "http://api.openweathermap.org/data/2.5/forecast?q=" + city + "&appid=" + parameters.weather_key \
                  + "&units=metric&&lang=RU"
    response = requests.get(request_str)
    info = response.json()

    return_str = "–ü–æ–≥–æ–¥–∞ –≤ –ú–æ—Å–∫–≤–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞"
    for i in info['list']:
        if i['dt_txt'] == (datetime.today() + timedelta(days=1)).strftime("%Y-%m-%d") + " 06:00:00" or \
                i['dt_txt'] == (datetime.today() + timedelta(days=1)).strftime("%Y-%m-%d") + " 12:00:00" or \
                i['dt_txt'] == (datetime.today() + timedelta(days=1)).strftime("%Y-%m-%d") + " 18:00:00" or \
                i['dt_txt'] == (datetime.today() + timedelta(days=2)).strftime("%Y-%m-%d") + " 00:00:00":
            if i['dt_txt'] == (datetime.today() + timedelta(days=1)).strftime("%Y-%m-%d") + " 06:00:00":
                return_str = return_str + "\n\n–£–¢–†–û\n"
            elif i['dt_txt'] == (datetime.today() + timedelta(days=1)).strftime("%Y-%m-%d") + " 12:00:00":
                return_str = return_str + "\n\n–î–ï–ù–¨\n"
            elif i['dt_txt'] == (datetime.today() + timedelta(days=1)).strftime("%Y-%m-%d") + " 18:00:00":
                return_str = return_str + "\n\n–í–ï–ß–ï–†\n"
            elif i['dt_txt'] == (datetime.today() + timedelta(days=2)).strftime("%Y-%m-%d") + " 00:00:00":
                return_str = return_str + "\n\n–ù–û–ß–¨\n"
            w_temperature = int(i["main"]["temp"])
            w_pressure = int(int(i["main"]["pressure"]) / 1.333)
            w_humidity = int(i["main"]["humidity"])
            w_wind_speed = round(i["wind"]["speed"], 1)
            w_wind_direction = degToCompass(int(i["wind"]["deg"]))
            w_wind_descr = speedToDescr(float(i["wind"]["speed"]))
            w_type_weather = ""
            w_description = ""
            w_icon = ""
            for item in i["weather"][:1]:
                w_type_weather = item["main"]
                w_description = str(item["description"]).capitalize()
                w_icon = item["icon"]
            w_icon = iconToSmile(w_icon)
            return_str = return_str + str(w_icon) + " " + str(w_description) + "\nüå° –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: " + str(
                w_temperature) \
                         + "¬∞C\n–î–∞–≤–ª–µ–Ω–∏–µ: " + str(w_pressure) + " –º–º. —Ä—Ç. —Å—Ç., –≤–ª–∞–∂–Ω–æ—Å—Ç—å: " + str(
                w_humidity) + "%\n–í–µ—Ç–µ—Ä: " + \
                         str(w_wind_speed) + " –º/c, " + str(w_wind_descr) + ", " + str(w_wind_direction)
    return return_str

# –ü–æ–ª—É—á–∏—Ç—å –ø–æ–≥–æ–¥—É –Ω–∞ –Ω–µ–¥–µ–ª—é.
def getWeekForecast(city):
    request_str = "http://api.openweathermap.org/data/2.5/forecast?q=" + city + "&appid=" + parameters.weather_key \
                  + "&units=metric&&lang=RU"
    response = requests.get(request_str)
    info = response.json()

    k = 1
    day_iter = 0
    night_iter = 0
    return_str = "–ü–æ–≥–æ–¥–∞ –≤ –ú–æ—Å–∫–≤–µ —Å " + (datetime.today() + timedelta(days=1)).strftime("%d.%m") + " –ø–æ " + \
                 (datetime.today() + timedelta(days=6)).strftime("%d.%m") + "\n\n"

    return_day = " "
    return_night = " "
    for i in info['list']:
        if i['dt_txt'] == (datetime.today() + timedelta(days=k)).strftime("%Y-%m-%d") + " 03:00:00":
            night_iter = night_iter + 1
            w_temperature = int(i["main"]["temp"])
            w_icon = ""
            for item in i["weather"][:1]:
                w_icon = item["icon"]
            w_icon = iconToSmile(w_icon)
            return_night = return_night + "/ " + str(w_temperature) + "¬∞C /"
        if i['dt_txt'] == (datetime.today() + timedelta(days=k)).strftime("%Y-%m-%d") + " 15:00:00":
            day_iter = day_iter + 1
            w_temperature = int(i["main"]["temp"])
            w_icon = ""
            for item in i["weather"][:1]:
                w_icon = item["icon"]
            w_icon = iconToSmile(w_icon)
            return_str = return_str +  "/ " + w_icon + " /"
            return_day = return_day + "/ " + str(w_temperature) + "¬∞C /"
            k = k + 1
    if night_iter == 4:
        return_night = return_night + "/ - /"
    if day_iter == 4:
        return_day = return_day + "/ - /"

    return_day = return_day + "&#12288;–î–ï–ù–¨"
    return_night = return_night + "&#12288;–ù–û–ß–¨"
    return_str = return_str + "\n\n" + return_night + "\n" + return_day
    return return_str

# –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –∏–∫–æ–Ω–∫—É –≤ —Å–º–∞–π–ª–∏–∫.
def iconToSmile(icon):
    if icon == "01d":
        return "‚òÄ"
    elif icon == "01n":
        return "üåë"
    elif icon == "02d":
        return "‚õÖ"
    elif icon in ("03d", "03n"):
        return "‚òÅüåë"
    elif icon in ("04d", "04n"):
        return "‚òÅ‚òÅ"
    elif icon in ("09d", "09n"):
        return "üåß"
    elif icon == "10d":
        return "üå¶"
    elif icon == "10n":
        return "üåßüåë"
    elif icon in ("11d", "11n"):
        return "‚õà"
    elif icon in ("13d", "13n"):
        return "‚ùÑ"
    elif icon in ("50d", "50n"):
        return "üå´"

# –ü–µ—Ä–µ–≤–µ—Å—Ç–∏ —Ç–∏–ø –ø–æ–≥–æ–¥—ã —Å –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ –Ω–∞ —Ä—É—Å—Å–∫–∏–π.
def typeWeatherToRus(type_weather):
    if type_weather == "Thunderstorm":
        return "–ì—Ä–æ–∑–∞"
    elif type_weather == "Drizzle":
        return "–ú–æ—Ä–æ—Å—è—â–∏–π –¥–æ–∂–¥—å"
    elif type_weather == "Rain":
        return "–î–æ–∂–¥—å"
    elif type_weather == "Snow":
        return "–°–Ω–µ–≥"
    elif type_weather == "Mist":
        return "–¢—É–º–∞–Ω"
    elif type_weather == "Smoke":
        return "–î—ã–º"
    elif type_weather == "Haze":
        return "–õ–µ–≥–∫–∏–π —Ç—É–º–∞–Ω"
    elif type_weather == "Dust":
        return "–ü—ã–ª—å"
    elif type_weather == "Fog":
        return "–¢—É–º–∞–Ω"
    elif type_weather == "Sand":
        return "–ü–µ—Å—á–∞–Ω–∞—è –±—É—Ä—è"
    elif type_weather == "Sand":
        return "–ü–µ–ø–µ–ª—å–Ω–∞—è –ø–æ–≥–æ–¥–∞"
    elif type_weather == "Squall":
        return "–®–∫–≤–∞–ª"
    elif type_weather == "Tornado":
        return "–¢–æ—Ä–Ω–∞–¥–æ"
    elif type_weather == "Clear":
        return "–Ø—Å–Ω–æ"
    elif type_weather == "Clouds":
        return "–û–±–ª–∞—á–Ω–æ"
    else:
        return "–Ω–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"

# –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –≥—Ä–∞–¥—É—Å—ã –≤ —Ö–∞—Ä–∞–∫—Ç–µ—Ä –≤–µ—Ç—Ä–∞.
def degToCompass(num):
    val = int((num / 22.5) + .5)
    arr = ["—Å–µ–≤–µ—Ä–Ω—ã–π", "—Å–µ–≤–µ—Ä–æ-–≤–æ—Å—Ç–æ—á–Ω—ã–π", "—Å–µ–≤–µ—Ä–æ-–≤–æ—Å—Ç–æ—á–Ω—ã–π", "—Å–µ–≤–µ—Ä–æ-–≤–æ—Å—Ç–æ—á–Ω—ã–π", "–≤–æ—Å—Ç–æ—á–Ω—ã–π", "—é–≥–æ-–≤–æ—Å—Ç–æ—á–Ω—ã–π",
           "—é–≥–æ-–≤–æ—Å—Ç–æ—á–Ω—ã–π", "—é–≥–æ-–≤–æ—Å—Ç–æ—á–Ω—ã–π", "—é–∂–Ω—ã–π", "—é–≥–æ-–∑–∞–ø–∞–¥–Ω—ã–π", "—é–≥–æ-–∑–∞–ø–∞–¥–Ω—ã–π", "—é–≥–æ-–∑–∞–ø–∞–¥–Ω—ã–π", "–∑–∞–ø–∞–¥–Ω—ã–π",
           "—Å–µ–≤–µ—Ä–æ-–∑–∞–ø–∞–¥–Ω—ã–π", "—Å–µ–≤–µ—Ä–æ-–∑–∞–ø–∞–¥–Ω—ã–π", "—Å–µ–≤–µ—Ä–æ-–∑–∞–ø–∞–¥–Ω—ã–π"]
    return arr[(val % 16)]

# –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å —Å–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞ –≤ –æ–ø–∏—Å–∞–Ω–∏–µ.
def speedToDescr(num):
    if 0 <= num < 0.3:
        return "—à—Ç–∏–ª—å"
    elif 0.3 <= num < 1.6:
        return "—Ç–∏—Ö–∏–π"
    elif 1.6 <= num < 3.4:
        return "–ª–µ–≥–∫–∏–π"
    elif 3.4 <= num < 5.5:
        return "—Å–ª–∞–±—ã–π"
    elif 5.5 <= num < 8.0:
        return "—É–º–µ—Ä–µ–Ω–Ω—ã–π"
    elif 8.0 <= num < 10.8:
        return "—Å–≤–µ–∂–∏–π"
    elif 10.8 <= num < 13.9:
        return "—Å–∏–ª—å–Ω—ã–π"
    elif 13.9 <= num < 17.2:
        return "–∫—Ä–µ–ø–∫–∏–π"
    elif 17.2 <= num < 20.8:
        return "–æ—á–µ–Ω—å –∫—Ä–µ–ø–∫–∏–π"
    elif 20.8 <= num < 24.5:
        return "—à—Ç–æ—Ä–º"
    elif 24.5 <= num < 28.5:
        return "—Å–∏–ª—å–Ω—ã–π —à—Ç–æ—Ä–º"
    elif 28.5 <= num < 32.7:
        return "–∂–µ—Å—Ç–æ–∫–∏–π —à—Ç–æ—Ä–º"
    elif num > 32.7:
        return "—É—Ä–∞–≥–∞–Ω"
